/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * compliance-queries-api
 * The ward's compliance queires endpoints
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "react-query";
import type { MutationFunction, UseMutationOptions } from "react-query";
import type { CreateCheckoutSession200 } from "../model/createCheckoutSession200";
import type { ErrorResponse } from "../model/errorResponse";
import { instance } from "../instance";

/**
 * Create a new checkout session
 */
export const createCheckoutSession = () => {
  return instance<CreateCheckoutSession200>({
    url: `/payments/create-checkout-session`,
    method: "POST",
  });
};

export const getCreateCheckoutSessionMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCheckoutSession>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCheckoutSession>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCheckoutSession>>,
    void
  > = () => {
    return createCheckoutSession();
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCheckoutSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCheckoutSession>>
>;

export type CreateCheckoutSessionMutationError = ErrorResponse;

export const useCreateCheckoutSession = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCheckoutSession>>,
    TError,
    void,
    TContext
  >;
}) => {
  const mutationOptions = getCreateCheckoutSessionMutationOptions(options);

  return useMutation(mutationOptions);
};
