/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * compliance-queries-api
 * The ward's compliance queires endpoints
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  AddressAnalysis
} from '../model/addressAnalysis'
import type {
  AnalysisAddressDataParams
} from '../model/analysisAddressDataParams'
import type {
  ErrorResponse
} from '../model/errorResponse'
import type {
  RiskFeed
} from '../model/riskFeed'
import { instance } from '.././instance';



/**
 * Analyze address
 */
export const analysisAddressData = (
    params: AnalysisAddressDataParams,
 signal?: AbortSignal
) => {
      
      
      return instance<AddressAnalysis>(
      {url: `/compliance/analyze-address`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getAnalysisAddressDataQueryKey = (params: AnalysisAddressDataParams,) => {
    return [`/compliance/analyze-address`, ...(params ? [params]: [])] as const;
    }

    
export const getAnalysisAddressDataQueryOptions = <TData = Awaited<ReturnType<typeof analysisAddressData>>, TError = ErrorResponse>(params: AnalysisAddressDataParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof analysisAddressData>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAnalysisAddressDataQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof analysisAddressData>>> = ({ signal }) => analysisAddressData(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof analysisAddressData>>, TError, TData> & { queryKey: QueryKey }
}

export type AnalysisAddressDataQueryResult = NonNullable<Awaited<ReturnType<typeof analysisAddressData>>>
export type AnalysisAddressDataQueryError = ErrorResponse

export const useAnalysisAddressData = <TData = Awaited<ReturnType<typeof analysisAddressData>>, TError = ErrorResponse>(
 params: AnalysisAddressDataParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof analysisAddressData>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAnalysisAddressDataQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get risk feed
 */
export const getRiskFeed = (
    
 signal?: AbortSignal
) => {
      
      
      return instance<RiskFeed>(
      {url: `/compliance/risk-feed`, method: 'GET', signal
    },
      );
    }
  

export const getGetRiskFeedQueryKey = () => {
    return [`/compliance/risk-feed`] as const;
    }

    
export const getGetRiskFeedQueryOptions = <TData = Awaited<ReturnType<typeof getRiskFeed>>, TError = ErrorResponse>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRiskFeed>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRiskFeedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRiskFeed>>> = ({ signal }) => getRiskFeed(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRiskFeed>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRiskFeedQueryResult = NonNullable<Awaited<ReturnType<typeof getRiskFeed>>>
export type GetRiskFeedQueryError = ErrorResponse

export const useGetRiskFeed = <TData = Awaited<ReturnType<typeof getRiskFeed>>, TError = ErrorResponse>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRiskFeed>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRiskFeedQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



