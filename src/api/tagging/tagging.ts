/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * compliance-queries-api
 * The ward's compliance queires endpoints
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  ErrorResponse
} from '../model/errorResponse'
import type {
  GetAccountTags200
} from '../model/getAccountTags200'
import type {
  TagIndividualAddress200
} from '../model/tagIndividualAddress200'
import type {
  TagIndividualAddressParams
} from '../model/tagIndividualAddressParams'
import { instance } from '.././instance';



/**
 * Get account tags
 */
export const getAccountTags = (
    
 signal?: AbortSignal
) => {
      
      
      return instance<GetAccountTags200>(
      {url: `/tags/get-account-tags`, method: 'GET', signal
    },
      );
    }
  

export const getGetAccountTagsQueryKey = () => {
    return [`/tags/get-account-tags`] as const;
    }

    
export const getGetAccountTagsQueryOptions = <TData = Awaited<ReturnType<typeof getAccountTags>>, TError = ErrorResponse>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAccountTags>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAccountTagsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccountTags>>> = ({ signal }) => getAccountTags(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAccountTags>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAccountTagsQueryResult = NonNullable<Awaited<ReturnType<typeof getAccountTags>>>
export type GetAccountTagsQueryError = ErrorResponse

export const useGetAccountTags = <TData = Awaited<ReturnType<typeof getAccountTags>>, TError = ErrorResponse>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAccountTags>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAccountTagsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Tag individual address
 */
export const tagIndividualAddress = (
    params: TagIndividualAddressParams,
 ) => {
      
      
      return instance<TagIndividualAddress200>(
      {url: `/tags/tag-individual-address`, method: 'POST',
        params
    },
      );
    }
  


export const getTagIndividualAddressMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tagIndividualAddress>>, TError,{params: TagIndividualAddressParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tagIndividualAddress>>, TError,{params: TagIndividualAddressParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tagIndividualAddress>>, {params: TagIndividualAddressParams}> = (props) => {
          const {params} = props ?? {};

          return  tagIndividualAddress(params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TagIndividualAddressMutationResult = NonNullable<Awaited<ReturnType<typeof tagIndividualAddress>>>
    
    export type TagIndividualAddressMutationError = ErrorResponse

    export const useTagIndividualAddress = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tagIndividualAddress>>, TError,{params: TagIndividualAddressParams}, TContext>, }
) => {

      const mutationOptions = getTagIndividualAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    